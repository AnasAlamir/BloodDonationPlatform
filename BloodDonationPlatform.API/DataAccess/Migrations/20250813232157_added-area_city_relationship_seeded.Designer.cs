// <auto-generated />
using System;
using BloodDonationPlatform.API.DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonationPlatform.API.DataAccess.Migrations
{
    [DbContext(typeof(BloodDonationDbContext))]
    [Migration("20250813232157_added-area_city_relationship_seeded")]
    partial class addedarea_city_relationship_seeded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Maadi"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Helwan"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Name = "Ramses"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            Name = "El Omarania"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 3,
                            Name = "Naga Elarab"
                        });
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.BloodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BloodType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A+"
                        },
                        new
                        {
                            Id = 2,
                            Name = "A-"
                        },
                        new
                        {
                            Id = 3,
                            Name = "B+"
                        },
                        new
                        {
                            Id = 4,
                            Name = "B-"
                        },
                        new
                        {
                            Id = 5,
                            Name = "AB+"
                        },
                        new
                        {
                            Id = 6,
                            Name = "AB-"
                        },
                        new
                        {
                            Id = 7,
                            Name = "O+"
                        },
                        new
                        {
                            Id = 8,
                            Name = "O-"
                        });
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Giza"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Alexanderia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Aswan"
                        });
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.DonationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<decimal>("NumOfLiter")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("StatesRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("HospitalId");

                    b.ToTable("DonationRequests");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("SSN")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BloodTypeId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.DonorDonationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DonationRequestId")
                        .HasColumnType("int");

                    b.Property<bool?>("DonorApprovalStatus")
                        .HasColumnType("bit");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastDateOfDonation")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DonationRequestId");

                    b.HasIndex("DonorId");

                    b.ToTable("DonorDonationRequests");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("StatusInventory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Admin", b =>
                {
                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.City", "City")
                        .WithMany("Admin")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Area", b =>
                {
                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.City", "City")
                        .WithMany("Area")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.DonationRequest", b =>
                {
                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.BloodType", "BloodType")
                        .WithMany("DonationRequests")
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.Hospital", "Hospital")
                        .WithMany("DonationRequests")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodType");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Donor", b =>
                {
                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.Area", "Area")
                        .WithMany("Donors")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.BloodType", "BloodType")
                        .WithMany("Donors")
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.DonorDonationRequest", b =>
                {
                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.DonationRequest", "DonationRequest")
                        .WithMany("DonorRequests")
                        .HasForeignKey("DonationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.Donor", "Donor")
                        .WithMany("DonationRequests")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonationRequest");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Hospital", b =>
                {
                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.Area", "Area")
                        .WithMany("Hospitals")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Inventory", b =>
                {
                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.BloodType", "BloodType")
                        .WithMany("Inventory")
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationPlatform.API.DataAccess.Models.Hospital", "Hospital")
                        .WithMany("Inventory")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodType");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Area", b =>
                {
                    b.Navigation("Donors");

                    b.Navigation("Hospitals");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.BloodType", b =>
                {
                    b.Navigation("DonationRequests");

                    b.Navigation("Donors");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.City", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.DonationRequest", b =>
                {
                    b.Navigation("DonorRequests");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Donor", b =>
                {
                    b.Navigation("DonationRequests");
                });

            modelBuilder.Entity("BloodDonationPlatform.API.DataAccess.Models.Hospital", b =>
                {
                    b.Navigation("DonationRequests");

                    b.Navigation("Inventory");
                });
#pragma warning restore 612, 618
        }
    }
}
